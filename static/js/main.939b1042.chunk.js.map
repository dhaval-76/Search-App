{"version":3,"sources":["store/searchSlice.js","Header.js","Stories.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["searchSlice","createSlice","name","initialState","isLoading","data","query","page","totalPages","reducers","setLoading","state","setStories","payload","removeStory","id","filter","story","objectId","handleSearch","searchQuery","handlePage","nextPage","prevPage","actions","selectSearch","search","Header","dispatch","useDispatch","useSelector","useEffect","a","axios","get","res","hits","nbPages","console","log","className","type","value","onChange","e","target","disabled","onClick","Stories","map","objectID","title","num_comments","url","points","author","href","rel","App","store","configureStore","reducer","searchReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.939b1042.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  isLoading: true,\n  data: [],\n  query: \"web developer\",\n  page: 1,\n  totalPages: 0,\n};\n\nexport const searchSlice = createSlice({\n  name: \"search\",\n  initialState,\n  reducers: {\n    setLoading: (state) => {\n      state.isLoading = true;\n    },\n    setStories: (state, { payload }) => {\n      state.isLoading = false;\n      state.data = payload.data;\n      state.totalPages = payload.totalPages;\n    },\n    removeStory: (state, { payload: id }) => {\n      state.data = state.data.filter((story) => story.objectId !== id);\n    },\n    handleSearch: (state, { payload: searchQuery }) => {\n      state.query = searchQuery;\n      state.page = 1;\n    },\n    handlePage: (state, { payload }) => {\n      if (payload === \"inc\") {\n        let nextPage = state.page + 1;\n        if (nextPage > state.totalPages) {\n          nextPage = 1;\n        }\n        state.page = nextPage;\n      } else if (payload === \"dec\") {\n        let prevPage = state.page - 1;\n        if (prevPage < 1) {\n          prevPage = state.totalPages;\n        }\n        state.page = prevPage;\n      }\n    },\n  },\n});\n\nexport const { setLoading, setStories, removeStory, handleSearch, handlePage } =\n  searchSlice.actions;\nexport const selectSearch = (state) => state.search;\n\nexport default searchSlice.reducer;\n\nexport const fetchStories = (query, page) => {\n  return async (dispatch) => {\n    dispatch(setLoading);\n    try {\n      const res = await axios.get(\n        `https://hn.algolia.com/api/v1/search?query=${query}&page=${page - 1}`\n      );\n      dispatch(\n        setStories({ data: res.data.hits, totalPages: res.data.nbPages })\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"./Header.css\";\r\nimport {\r\n  fetchStories,\r\n  handlePage,\r\n  handleSearch,\r\n  selectSearch,\r\n} from \"./store/searchSlice\";\r\n\r\nfunction Header() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(selectSearch);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchStories(state.query, state.page));\r\n  }, [state.query, state.page, dispatch]);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <form className=\"header__search\">\r\n        <h2>Search Hacker News</h2>\r\n        <input\r\n          type=\"text\"\r\n          className=\"header_searchInput\"\r\n          value={state.query}\r\n          onChange={(e) => dispatch(handleSearch(e.target.value))}\r\n        />\r\n      </form>\r\n      <div className=\"header__btns\">\r\n        <button\r\n          disabled={state.isLoading}\r\n          onClick={() => dispatch(handlePage(\"dec\"))}\r\n        >\r\n          Prev\r\n        </button>\r\n        <p>\r\n          {state.page} of {state.totalPages}\r\n        </p>\r\n        <button\r\n          disabled={state.isLoading}\r\n          onClick={() => dispatch(handlePage(\"inc\"))}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeStory, selectSearch } from \"./store/searchSlice\";\r\nimport \"./Stories.css\";\r\n\r\nfunction Stories() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(selectSearch);\r\n\r\n  if (state.isLoading) {\r\n    return <div className=\"loading\"></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"stories\">\r\n      {state.data.map(\r\n        ({ objectID, title, num_comments, url, points, author }) => (\r\n          <div key={objectID} className=\"story\">\r\n            <h4 className=\"story__title\">{title}</h4>\r\n            <p className=\"story__info\">\r\n              {points} points by <span>{author} | </span> {num_comments} comments\r\n            </p>\r\n            <div>\r\n              <a\r\n                href={url}\r\n                className=\"story__readLink\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                read more\r\n              </a>\r\n              <button className=\"story__removeBtn\" onClick={() => dispatch(removeStory(objectID))}>remove</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stories;\r\n","import Header from \"./Header\";\nimport Stories from \"./Stories\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Stories />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport searchReducer from './searchSlice';\n\nexport const store = configureStore({\n  reducer: {\n    search: searchReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}